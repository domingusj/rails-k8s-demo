steps:

  # Check if $COMMIT_SHA exists. If it doesn't go ahead and try to build and deploy it. This is OK for stage, but not prod.
  - id: 'conditionally-build-for-deploy'
    name: 'gcr.io/cloud-builders/docker'
    env:
    - TAG_NAME=${TAG_NAME}
    - COMMIT_SHA=${COMMIT_SHA}
    entrypoint: 'bash'
    args:
    - -c
    - |
      if [[ "$TAG_NAME" == "stage" ]]; then \
        docker pull gcr.io/${PROJECT_ID}/${_APP_NAME}:${COMMIT_SHA} || \
        (docker pull gcr.io/${PROJECT_ID}/${_APP_NAME}:cache-runtime; \
        docker build --build-arg bundle_without="development:test" --build-arg rails_env="production" --cache-from=gcr.io/${PROJECT_ID}/${_APP_NAME}:cache-runtime -t gcr.io/${PROJECT_ID}/${_APP_NAME}:${COMMIT_SHA} . && \
        docker push gcr.io/${PROJECT_ID}/${_APP_NAME}:${COMMIT_SHA}); \
      elif [[ "$TAG_NAME" == "prod" ]]; then \
        docker pull gcr.io/${PROJECT_ID}/${_APP_NAME}:${COMMIT_SHA} || \
        ( echo "An image tagged with $COMMIT_SHA not found, not deploying unverified image to prod. Exiting."; exit 1 ) \
      else \
        echo "Unknown tag name $TAG_NAME. Exiting."; exit 1; \
      fi
    waitFor: ['-']

  - id: get-kube-config
    name: gcr.io/cloud-builders/kubectl
    env:
    - CLOUDSDK_CORE_PROJECT=${_CLOUDSDK_CORE_PROJECT}
    - CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}
    - CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}
    - KUBECONFIG=/workspace/.kube/config
    args:
       - cluster-info
    waitFor: ['-']

  - id: decrypt-secrets
    name: mozilla/sops
    args:
      - sops
      - --decrypt
      - --in-place
      - k8s/${_APP_NAME}/${TAG_NAME}-secrets.yaml
    waitFor: ['-']

  - id: update-deploy-tag
    name: gcr.io/cloud-builders/gcloud
    args:
      - container
      - images
      - add-tag
      - gcr.io/${PROJECT_ID}/${_APP_NAME}:${COMMIT_SHA}
      - gcr.io/${PROJECT_ID}/${_APP_NAME}:${TAG_NAME}
      - gcr.io/${PROJECT_ID}/${_APP_NAME}:${TAG_NAME}-${COMMIT_SHA}

  - id: deploy
    name: cloudnatived/helm-cloudbuilder
    env:
      - KUBECONFIG=/workspace/.kube/config
    args:
      - helm
      - upgrade
      - --install
      - ${TAG_NAME}-${_APP_NAME}
      - --namespace=${TAG_NAME}-${_APP_NAME}
      - --values
      - k8s/${_APP_NAME}/${TAG_NAME}-values.yaml
      - --values
      - k8s/${_APP_NAME}/${TAG_NAME}-secrets.yaml
      - --set
      - image.tag=${COMMIT_SHA}
      - ./k8s/${_APP_NAME}
